Lexer, (redundant: prefer left alternatives), prefer first matching element:
token = key | identifier | field | brac | structural | operator | number
reserved = {'var', 'Void', 'Int', 'Bool', 'Char', 'if', 'else','while',
    'return', 'False', 'True'} 
word = alpha <+> (is '_' | alphanum)*
keyword = in {w in word | in reserved}
identifier = in {w in word | not in reserved}
field = '.hd', '.tl', '.fst', '.snd'
brac = in {'(',')','{','}','[',']'}
special = (is '=' <+> reject '=') | in {';', '->', ',', '::', '[]'}
operator = in {'+', '*', '/', '%', '==', '<=', '<', '>=', '>', '!=', '!', '&&', '||'} 
    | is '-' <+> reject '>' 
    | is ':' <+> reject ':'
number  = (digit)+
char    = is '\'' <+> (('\' <+> any) | non '\'') <+> is '\''   //memo: use escape
string  = is '"' <+> (('\' <+> any) | non '"')* <+> is '"'     //memo: use quoted
comment = lineComment '//' | blockComment '/*' '*/'
whitespace = (space | tab | newline)+
Lexer Defined.


Notes on the full grammar:
Since the lexer produces tokens with content, and expressions and operators have
a hierarchy, we extend the grammar notation with arguments: concatenation is now
denoted by <+>, while A B means "Nonterminal A, with argument B". Obviously, A
should take an argument. "Don't care" is denoted by _ . 

Keyword "matching" can be used to require the content of a token to match the
second. So: Lexer.key matching 'Void' only recognizes Void, and Lexer.var
matching 'Void' will never be satisfied because the lexer doesn't ever match
'Void', a keyword, as a var.

We also don't want constants all through our grammar, so we define some numbers
here. Note that we don't really care about the exact numbers, just the order.
The below list is intentionally sorted. 
The grammar will be written such that lower numbers bind more strongly.

atomlevel = 0
neglevel = 2
multlevel = 4
pluslevel = 6
ordlevel = 8
eqlevel = 9
notlevel = 10
boollevel = 12
conslevel = 14
tuplevel = 16
toplevel = 18

Parser grammar:
#PREPROCESSING: remove all Lexer.whitespace, remove all Lexer.comment

Id = Lexer.identifier
Field = Lexer.field*
Special s = Lexer.special matching s
Key k = Lexer.key matching k
Brac t = Lexer.brac matching t
Lit = Lexer.number | Lexer.char | Lexer.string
Op o = Lexer.operator matching o

#compound(unambiguous)
LOp multlevel = Op '*' | Op '/' | Op ''%'
LOp pluslevel = Op '+' | Op '-'
LOp ordlevel  = Op '<' | Op '>' | Op '<=' | Op '>='
LOp eqlevel   = Op '==' | Op '!='
LOp boollevel = Op '&&' | Op '||'

ROp conslevel = Op ':'

#compound(unambiguous)
UnOp neglevel = Op '-'
UnOp notlevel = Op '!'

Parens p = Brac '(' <+> p <+> Brac ')' 
Braced p = Brac '{' <+> p <+> Brac '}'
Pair p = Parens (p <+> Special ',' <+> p)

Args   = Exp toplevel <+> [Special ',' <+> Args] // Renamed from ActArgs
FunCall = Id <+> Parens ([Args])



#SPECIAL: CHAINL(..), parse as contex-sensitive by monad-only chainl combinator
#compound(try all matching alternatives, in order of appearance)
Exp atomlevel   = Lit | Parens (Exp toplevel) | Pair (Exp toplevel)
                | Id <+> Field
                | Key 'False' | Key 'True' | Special '[]'
                | FunCall
Exp n = UnOp n <+> Exp n
Exp (n+1) = Exp n <+> ROp n <+> Exp (n+1)
// hint: liftA3 ROpExp <$> parseExp n <*> parseROp n <*> parseExp (S n)
Exp (n+1) = CHAINL(Exp (n+1) <+> LOp n <+> Exp n)
Exp (n+k) = Exp n


//We're changing the language here to be slightly more C-like. Control
// structures can affect any statement, and {Stmt*} is a (compound) statement.
Stmt    = Key 'if' <+> Parens (Exp toplevel) <+> Stmt <+> [Key 'else' <+> Stmt]
        | Key 'while' <+> Parens (Exp toplevel) <+> Stmt
        | Id <+> Field <+> Special '=' <+> Exp toplevel <+> Special ';'
        | Funcall <+> Special ';'
        | Key 'return' <+> [Exp toplevel] <+> Special ';'

BasicType = Key 'Int' | Key 'Bool' | Key 'Char'
Type = BasicType | Pair Type | Brac '[' <+> Type <+> Brac ']' | Id
RetType = Type | Key 'Void'
FType = Type* <+> Special '->' <+> RetType 


Params = Id <+> [Special ',' <+> Params]         // Renamed from FArgs
FunDecl = Id <+> Parens ([Params]) <+> [Special '::' <+> FType] 

VarDef = (Key 'var' | Type) <+> Id <+> Special '=' <+> Exp toplevel <+> Special ';'
//Change: Empty function is now legal. Its type is -> Void
FunBod = Braced (VarDef* <+> Stmt*)

FunDef = FunDecl <+> FunBod
Def = VarDef | FunDef
SPL = Def*
Parser grammar Defined.
