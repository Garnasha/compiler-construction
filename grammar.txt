Lexer, (redundant: prefer left alternatives), prefer first matching element:
token = (key <<|> identifier) | brac | structural | operator | number
reserved = {'var', 'Void', 'Int', 'Bool', 'Char', 'if', 'else','while',
    'return', 'False', 'True', 'hd', 'tl', 'fst', 'snd', '[]'}
word = alpha <+> (is '_' | alphanum)*
keyword = in {w in word | in reserved}
identifier = in {w in word | not in reserved}
brac = in {'(',')','{','}','[',']'}
structural = (is '=' <+> reject '=') | in {';', '.', '->', ',', '\'', '"', '::'}
operator = in {'+', '*', '/', '%', '==', '<=', '<', '>=', '>', '!=', '!', '&&', '||'} 
    | is '-' <+> reject '>' 
    | is ':' <+> reject ':'
number = (digit)+
Lexer Defined.

Since the lexer produces tokens with content, and expressions and operators have
a hierarchy, we extend the grammar notation with arguments: concatenation is now
denoted by <+>, while A B means "Nonterminal A, with argument B". Obviously, A
should take an argument. "Don't care" is denoted by _ . 

Keyword "matching" can be used to require the content of a token to match the
second. So: Lexer.key matching 'Void' only recognizes Void, and Lexer.var
matching 'Void' will never be satisfied because the lexer doesn't ever match
'Void', a keyword, as a var.

We also don't want constants all through our grammar, so we define some numbers
here. Note that we don't really care about the exact numbers, just the order.
The below list is intentionally sorted. 
The grammar will be written such that lower numbers bind more strongly.
atomlevel = 0
neglevel = 2
multlevel = 4
pluslevel = 6
complevel = 8
notlevel = 10
boollevel = 12
conslevel = 14
tuplevel = 16
toplevel = 18


Id = Lexer.identifier
Special s = Lexer.structural matching s
Key k = Lexer.key matching k
Brac t = Lexer.brac matching t
Parens p = Brac '(' <+> p <+> Brac ')' 
Braced p = Brac '{' <+> p <+> Brac '}'
Pair p = Parens (p <+> Special ',' <+> p)

BasicType = Key 'Int' | Key 'Bool' | Key 'Char'
Type = BasicType | Pair Type | Brac '[' <+> Type <+> Brac ']' | Id
RetType = Type | 'Void'
FType = Type* <+> Special '->' <+> RetType 
Params = Id <+> [Special ',' <+> Params]     // Renamed from FArgs
FunDecl = Id <+> Parens ([Params]) <+> [Special '::' <+> FType] 

#SPECIAL, parsed as contex-sensitive.
Chainl p op = p <+> [op <+> p]
#compound(try all matching alternatives, in order of appearance)
Exp (n+k) = Exp n


VarDef = (Key 'var' | Type) <+> Id <+> Special '=' <+> Exp toplevel <+> Special ';'


FunBod = Braced (VarDef* <+> Stmt+)
FunDef = FunDecl <+> FunBod
Def = VarDef | FunDef
SPL = Def*
